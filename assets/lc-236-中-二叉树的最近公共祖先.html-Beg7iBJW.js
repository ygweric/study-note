import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const p={},o=l(`<h1 id="lc-236-中-二叉树的最近公共祖先" tabindex="-1"><a class="header-anchor" href="#lc-236-中-二叉树的最近公共祖先"><span>lc-236-中-二叉树的最近公共祖先</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/lowest-common-ancestor-of-a-binary-tree/description/</span></span>
<span class="line"><span style="color:#6A9955;">236. 二叉树的最近公共祖先</span></span>
<span class="line"><span style="color:#6A9955;">给定一个二叉树, 找到该树中两个指定节点的最近公共祖先。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">百度百科中最近公共祖先的定义为：“对于有根树 T 的两个节点 p、q，最近公共祖先表示为一个节点 x，满足 x 是 p、q 的祖先且 x 的深度尽可能大（一个节点也可以是它自己的祖先）。”</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">题解： https://www.bilibili.com/video/BV1Qu4y1P7kg?p=10&amp;vd_source=80df5fba01fe79535a6107a33a26594c</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">   做不出来呀，说是腾讯的题，还是看题解吧</span></span>
<span class="line"><span style="color:#6A9955;">   优化：看完题解，懂了50%把，手写一次，看行不行</span></span>
<span class="line"><span style="color:#6A9955;">   改进3：上一个结果出来了，但是逻辑不是很清楚，又看一遍题解，这里再写一次</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> {</span><span style="color:#4FC1FF;">TreeNode</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">generateTree</span><span style="color:#D4D4D4;">} = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/arr2tree&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> *</span></span>
<span class="line"><span style="color:#6A9955;"> *</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {TreeNode}</span><span style="color:#9CDCFE;"> root</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {TreeNode}</span><span style="color:#9CDCFE;"> p</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {TreeNode}</span><span style="color:#9CDCFE;"> q</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@return</span><span style="color:#4EC9B0;"> {TreeNode}</span></span>
<span class="line"><span style="color:#6A9955;"> * </span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> lowestCommonAncestor</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> result</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span>
<span class="line"><span style="color:#6A9955;">  /**</span></span>
<span class="line"><span style="color:#6A9955;">   * 判断找到最近父节点的逻辑</span></span>
<span class="line"><span style="color:#6A9955;">   * 1. lson &amp;&amp; rson : 左右节点各存在pq</span></span>
<span class="line"><span style="color:#6A9955;">   * 2. 或者 “(root.val === p.val || root.val === q.val) &amp;&amp; (lson || rson)”： 当前节点有一个pq， 另一个的子树中有pq</span></span>
<span class="line"><span style="color:#6A9955;">   * 此时赋值到最终的result</span></span>
<span class="line"><span style="color:#6A9955;">   * </span></span>
<span class="line"><span style="color:#6A9955;">   * </span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> root</span><span style="color:#6A9955;"> 当前迭代的节点</span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> p</span><span style="color:#6A9955;"> </span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> q</span><span style="color:#6A9955;"> </span></span>
<span class="line"><span style="color:#6A9955;">   * </span><span style="color:#569CD6;">@returns</span><span style="color:#6A9955;"> lson || rson || root.val === p.val || root.val === q.val, </span></span>
<span class="line"><span style="color:#6A9955;">   *  true：  表示当前节点或子树至少有一个p或者q</span></span>
<span class="line"><span style="color:#6A9955;">   *  false： 当前节点或子树一个pq节点都没有，可以直接废弃</span></span>
<span class="line"><span style="color:#6A9955;">   */</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#DCDCAA;"> dfs</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) </span><span style="color:#C586C0;">return</span><span style="color:#569CD6;"> false</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> lson</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> rson</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> ((</span><span style="color:#9CDCFE;">lson</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">rson</span><span style="color:#D4D4D4;">) || ((</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">) &amp;&amp; (</span><span style="color:#9CDCFE;">lson</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">rson</span><span style="color:#D4D4D4;">))) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      result</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">root</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> true</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> lson</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">rson</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> || </span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"><span style="color:#DCDCAA;">  dfs</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">p</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">q</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> result</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">lowestCommonAncestor</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]),</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">),</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)).</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 3</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">lowestCommonAncestor</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">]), </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">),  </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)).</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 5</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">lowestCommonAncestor</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]), </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">),</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)).</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 1</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">lowestCommonAncestor</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">([-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,-</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">]), </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">),</span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> TreeNode</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">)).</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),e=[o];function r(c,D){return n(),a("div",null,e)}const y=s(p,[["render",r],["__file","lc-236-中-二叉树的最近公共祖先.html.vue"]]),i=JSON.parse('{"path":"/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-236-%E4%B8%AD-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html","title":"lc-236-中-二叉树的最近公共祖先","lang":"zh-CN","frontmatter":{"description":"lc-236-中-二叉树的最近公共祖先","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-236-%E4%B8%AD-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E8%BF%91%E5%85%AC%E5%85%B1%E7%A5%96%E5%85%88.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-236-中-二叉树的最近公共祖先"}],["meta",{"property":"og:description","content":"lc-236-中-二叉树的最近公共祖先"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-236-中-二叉树的最近公共祖先\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/二叉树/lc-236-中-二叉树的最近公共祖先.md"}');export{y as comp,i as data};
