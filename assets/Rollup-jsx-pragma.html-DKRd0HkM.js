import{_ as s,o as a,c as n,e}from"./app-CnK5B_QS.js";const l={},p=e(`<h1 id="q-我在rollup打包时候可以添加配置-那么在当前配置文件想添加想通-的配置-pragma-jsx-该如何做" tabindex="-1"><a class="header-anchor" href="#q-我在rollup打包时候可以添加配置-那么在当前配置文件想添加想通-的配置-pragma-jsx-该如何做"><span>Q:我在rollup打包时候可以添加配置, 那么在当前配置文件想添加想通 的配置“ pragma: &#39;jsx&#39;,”该如何做</span></a></h1><p>我在rollup打包时候可以添加配置，</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>[</span></span>
<span class="line"><span>      &#39;@babel/plugin-transform-react-jsx&#39;,</span></span>
<span class="line"><span>      {</span></span>
<span class="line"><span>        pragma: &#39;jsx&#39;,</span></span>
<span class="line"><span>        pragmaFrag: &#39;Fragment&#39;</span></span>
<span class="line"><span>      }</span></span>
<span class="line"><span>    ]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>那么在当前配置文件想添加想通 的配置“ pragma: &#39;jsx&#39;,”该如何做</p><h2 id="a" tabindex="-1"><a class="header-anchor" href="#a"><span>A:</span></a></h2><p>在你当前的 Gulp + TypeScript 配置中，要实现与 Rollup 中 Babel 插件相同的 <code>pragma: &#39;jsx&#39;</code> 配置（即指定 JSX 转换的函数名），需要通过 TypeScript 编译器的配置来实现，因为你这里使用的是 TypeScript 直接处理 JSX，而非 Babel。</p><p>具体做法是在 TypeScript 编译选项中添加 <code>jsxFactory</code> 和 <code>jsxFragmentFactory</code> 配置，对应 Babel 的 <code>pragma</code> 和 <code>pragmaFrag</code>。</p><p>可以在 <code>getTSCompilerOptions</code> 函数中添加相关配置，如下所示：</p><p>javascript</p><p>运行</p><div class="language-javascript line-numbers-mode" data-highlighter="shiki" data-ext="javascript" data-title="javascript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> getTSCompilerOptions</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#9CDCFE;">  moduleKind</span><span style="color:#D4D4D4;">: </span><span style="color:#CE9178;">&#39;esnext&#39;</span><span style="color:#D4D4D4;"> | </span><span style="color:#CE9178;">&#39;commonjs&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  userTSCompilerOptions</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">Record</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">unknown</span><span style="color:#D4D4D4;">&gt; = {},</span></span>
<span class="line"><span style="color:#9CDCFE;">  noEmitOnError</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">boolean</span></span>
<span class="line"><span style="color:#D4D4D4;">): </span><span style="color:#4EC9B0;">Settings</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  delete</span><span style="color:#9CDCFE;"> userTSCompilerOptions</span><span style="color:#D4D4D4;">[</span><span style="color:#CE9178;">&#39;outDir&#39;</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    moduleResolution:</span><span style="color:#CE9178;"> &#39;node&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    target:</span><span style="color:#CE9178;"> &#39;es2016&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#D4D4D4;">    ...</span><span style="color:#9CDCFE;">userTSCompilerOptions</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    noEmit:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    emitDeclarationOnly:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    declaration:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    isolatedModules:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    allowSyntheticDefaultImports:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    module:</span><span style="color:#9CDCFE;"> moduleKind</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    skipLibCheck:</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">    noEmitOnError:</span><span style="color:#9CDCFE;"> noEmitOnError</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#6A9955;">    // 添加 JSX 相关配置，对应 Babel 的 pragma 和 pragmaFrag</span></span>
<span class="line"><span style="color:#9CDCFE;">    jsx:</span><span style="color:#CE9178;"> &#39;react&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 确保启用 JSX 处理</span></span>
<span class="line"><span style="color:#9CDCFE;">    jsxFactory:</span><span style="color:#CE9178;"> &#39;jsx&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 对应 pragma: &#39;jsx&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">    jsxFragmentFactory:</span><span style="color:#CE9178;"> &#39;Fragment&#39;</span><span style="color:#6A9955;"> // 对应 pragmaFrag: &#39;Fragment&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置说明" tabindex="-1"><a class="header-anchor" href="#配置说明"><span>配置说明：</span></a></h3><ul><li>TypeScript 中的 <code>jsxFactory</code> 等价于 Babel 的 <code>pragma</code>，用于指定 JSX 转换时使用的函数（例如 <code>jsx</code> 替代默认的 <code>React.createElement</code>）。</li><li>TypeScript 中的 <code>jsxFragmentFactory</code> 等价于 Babel 的 <code>pragmaFrag</code>，用于指定 JSX 片段使用的组件（例如 <code>Fragment</code> 替代默认的 <code>React.Fragment</code>）。</li><li>确保 <code>jsx</code> 选项设置为 <code>&#39;react&#39;</code> 或 <code>&#39;preserve&#39;</code> 等有效值，以启用 TypeScript 对 JSX 的处理。</li></ul><p>这样配置后，TypeScript 编译器在转换 JSX 语法时，会使用你指定的 <code>jsx</code> 函数和 <code>Fragment</code> 组件，与 Rollup 中 Babel 插件的配置效果一致。</p>`,14),o=[p];function r(c,t){return a(),n("div",null,o)}const d=s(l,[["render",r],["__file","Rollup-jsx-pragma.html.vue"]]),m=JSON.parse(`{"path":"/fe/module/jsx/Rollup-jsx-pragma.html","title":"Q:我在rollup打包时候可以添加配置,  那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做","lang":"zh-CN","frontmatter":{"description":"Q:我在rollup打包时候可以添加配置, 那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做 我在rollup打包时候可以添加配置， 那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做 A: 在你当前的 Gulp + TypeScript 配置中，要实现与 Rollup 中 Babel 插件相同...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/fe/module/jsx/Rollup-jsx-pragma.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"Q:我在rollup打包时候可以添加配置,  那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做"}],["meta",{"property":"og:description","content":"Q:我在rollup打包时候可以添加配置, 那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做 我在rollup打包时候可以添加配置， 那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做 A: 在你当前的 Gulp + TypeScript 配置中，要实现与 Rollup 中 Babel 插件相同..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-09-25T01:30:22.000Z"}],["meta",{"property":"article:modified_time","content":"2025-09-25T01:30:22.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Q:我在rollup打包时候可以添加配置,  那么在当前配置文件想添加想通 的配置“ pragma: 'jsx',”该如何做\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-09-25T01:30:22.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"A:","slug":"a","link":"#a","children":[{"level":3,"title":"配置说明：","slug":"配置说明","link":"#配置说明","children":[]}]}],"git":{"updatedTime":1758763822000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"fe/module/jsx/Rollup-jsx-pragma.md"}`);export{d as comp,m as data};
