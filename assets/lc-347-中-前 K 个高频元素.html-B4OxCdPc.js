import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},p=l(`<h1 id="lc-347-中-前-k-个高频元素" tabindex="-1"><a class="header-anchor" href="#lc-347-中-前-k-个高频元素"><span>lc-347-中-前 K 个高频元素</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/top-k-frequent-elements/description/</span></span>
<span class="line"><span style="color:#6A9955;">347. 前 K 个高频元素</span></span>
<span class="line"><span style="color:#6A9955;">给你一个整数数组 nums 和一个整数 k ，请你返回其中出现频率前 k 高的元素。你可以按 任意顺序 返回答案。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">提示：</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">1 &lt;= nums.length &lt;= 105</span></span>
<span class="line"><span style="color:#6A9955;">k 的取值范围是 [1, 数组中不相同的元素的个数]</span></span>
<span class="line"><span style="color:#6A9955;">题目数据保证答案唯一，换句话说，数组中前 k 个高频元素的集合是唯一的</span></span>
<span class="line"><span style="color:#6A9955;"> </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">进阶：你所设计算法的时间复杂度 必须 优于 O(n log n) ，其中 n 是数组大小。</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> topKFrequent</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">k</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">    // 这个应该用小顶堆堆排序，但是太复杂了，说下自己思路吧，其他不想了</span></span>
<span class="line"><span style="color:#6A9955;">// todo</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">topKFrequent</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">//  [1,2]</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">topKFrequent</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// [1]</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(topKFrequent(xxxxxx)); // xxxxxxxx</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(topKFrequent(xxxxxx)); // xxxxxxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[p];function t(c,i){return n(),a("div",null,o)}const d=s(e,[["render",t],["__file","lc-347-中-前 K 个高频元素.html.vue"]]),D=JSON.parse('{"path":"/interview/algorithm/top-k/lc-347-%E4%B8%AD-%E5%89%8D%20K%20%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html","title":"lc-347-中-前 K 个高频元素","lang":"zh-CN","frontmatter":{"description":"lc-347-中-前 K 个高频元素","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/top-k/lc-347-%E4%B8%AD-%E5%89%8D%20K%20%E4%B8%AA%E9%AB%98%E9%A2%91%E5%85%83%E7%B4%A0.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-347-中-前 K 个高频元素"}],["meta",{"property":"og:description","content":"lc-347-中-前 K 个高频元素"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-347-中-前 K 个高频元素\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/top-k/lc-347-中-前 K 个高频元素.md"}');export{d as comp,D as data};
