import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},p=l(`<h1 id="ts的infer介绍" tabindex="-1"><a class="header-anchor" href="#ts的infer介绍"><span>ts的infer介绍</span></a></h1><p>在 TypeScript 中，<code>infer</code> 是条件类型（Conditional Types）中用于<strong>声明一个待推断的类型变量</strong>的关键字。它的核心作用是：在类型匹配过程中，让 TypeScript 自动推导并捕获某个位置的类型，从而简化复杂的类型提取、转换逻辑。</p><p><code>infer</code> 只能在条件类型的 <code>extends</code> 子句中使用，语法通常为 <code>infer 类型变量名</code>，用于“占位”需要推断的类型。</p><h3 id="核心应用场景" tabindex="-1"><a class="header-anchor" href="#核心应用场景"><span>核心应用场景</span></a></h3><p><code>infer</code> 的主要价值在于<strong>从复杂类型中“提取”或“推导”出子类型</strong>，常见场景包括：</p><h4 id="_1-提取函数的返回值类型" tabindex="-1"><a class="header-anchor" href="#_1-提取函数的返回值类型"><span>1. 提取函数的返回值类型</span></a></h4><p>最经典的场景之一：从函数类型中提取其返回值类型。</p><p>TypeScript 内置的 <code>ReturnType&lt;T&gt;</code> 就是基于 <code>infer</code> 实现的：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 定义：从函数类型 T 中提取返回值类型</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> MyReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">[]) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> infer</span><span style="color:#4EC9B0;"> R</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">R</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> getUser</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">name:</span><span style="color:#CE9178;"> &quot;张三&quot;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age:</span><span style="color:#B5CEA8;"> 20</span><span style="color:#D4D4D4;"> };</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 提取 getUser 函数的返回值类型 { name: string; age: number }</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> User</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">MyReturnType</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> getUser</span><span style="color:#D4D4D4;">&gt;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>原理：当 <code>T</code> 匹配“函数类型”时，<code>infer R</code> 会自动捕获该函数的返回值类型，最终通过 <code>R</code> 返回。</p><h4 id="_2-提取函数的参数类型" tabindex="-1"><a class="header-anchor" href="#_2-提取函数的参数类型"><span>2. 提取函数的参数类型</span></a></h4><p>类似地，可以提取函数的参数类型（或某个参数的类型）。</p><p>TypeScript 内置的 <code>Parameters&lt;T&gt;</code> 也基于 <code>infer</code> 实现：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 定义：从函数类型 T 中提取参数类型组成的元组</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> MyParameters</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#D4D4D4;"> (...</span><span style="color:#9CDCFE;">args</span><span style="color:#D4D4D4;">: </span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> P</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#4EC9B0;"> any</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">P</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> greet</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">age</span><span style="color:#D4D4D4;">: </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> \`Hello, </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">name</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">, age </span><span style="color:#569CD6;">\${</span><span style="color:#9CDCFE;">age</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 提取参数类型 [string, number]</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> GreetParams</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">MyParameters</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">typeof</span><span style="color:#9CDCFE;"> greet</span><span style="color:#D4D4D4;">&gt;; </span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 提取第一个参数的类型 string</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> FirstParam</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">GreetParams</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">];</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_3-提取数组-元组的元素类型" tabindex="-1"><a class="header-anchor" href="#_3-提取数组-元组的元素类型"><span>3. 提取数组/元组的元素类型</span></a></h4><p>从数组或元组中提取元素类型，或特定位置的元素类型：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 提取数组的元素类型</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> ArrayItem</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> Item</span><span style="color:#D4D4D4;">&gt; ? </span><span style="color:#4EC9B0;">Item</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> NumberItem</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ArrayItem</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">[]&gt;; </span><span style="color:#6A9955;">// number</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> StringItem</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ArrayItem</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">[]&gt;; </span><span style="color:#6A9955;">// string</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 提取元组的第一个元素类型</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> FirstElement</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#D4D4D4;"> [</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> First</span><span style="color:#D4D4D4;">, ...</span><span style="color:#4EC9B0;">any</span><span style="color:#D4D4D4;">[]] ? </span><span style="color:#4EC9B0;">First</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">never</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">FirstElement</span><span style="color:#D4D4D4;">&lt;[</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">]&gt;; </span><span style="color:#6A9955;">// string</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> T2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">FirstElement</span><span style="color:#D4D4D4;">&lt;[]&gt;; </span><span style="color:#6A9955;">// never（空元组无第一个元素）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_4-提取-promise-包裹的类型" tabindex="-1"><a class="header-anchor" href="#_4-提取-promise-包裹的类型"><span>4. 提取 Promise 包裹的类型</span></a></h4><p>从 <code>Promise&lt;T&gt;</code> 中提取内部的 <code>T</code> 类型（即“解包”Promise）：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 定义：从 Promise&lt;T&gt; 中提取 T</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> U</span><span style="color:#D4D4D4;">&gt; ? </span><span style="color:#4EC9B0;">U</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> P1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;&gt;; </span><span style="color:#6A9955;">// string</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> P2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">[]&gt;&gt;; </span><span style="color:#6A9955;">// number[]</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> P3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">&gt;; </span><span style="color:#6A9955;">// string（非 Promise 类型直接返回自身）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>甚至可以处理嵌套的 Promise（如 <code>Promise&lt;Promise&lt;T&gt;&gt;</code>）：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 递归解包嵌套 Promise</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> DeepUnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> U</span><span style="color:#D4D4D4;">&gt; </span></span>
<span class="line"><span style="color:#D4D4D4;">  ? </span><span style="color:#4EC9B0;">DeepUnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">U</span><span style="color:#D4D4D4;">&gt; </span></span>
<span class="line"><span style="color:#D4D4D4;">  : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> P4</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">DeepUnwrapPromise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">Promise</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">&gt;&gt;&gt;; </span><span style="color:#6A9955;">// boolean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_5-提取字符串字面量的部分内容" tabindex="-1"><a class="header-anchor" href="#_5-提取字符串字面量的部分内容"><span>5. 提取字符串字面量的部分内容</span></a></h4><p>结合模板字符串类型，可以从字符串字面量中提取特定部分：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 从 &quot;前缀:值&quot; 格式的字符串中提取 &quot;值&quot;</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> ExtractValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#CE9178;"> \`</span><span style="color:#569CD6;">\${</span><span style="color:#4EC9B0;">string</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">:</span><span style="color:#569CD6;">\${</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> Value</span><span style="color:#569CD6;">}</span><span style="color:#CE9178;">\`</span><span style="color:#D4D4D4;"> ? </span><span style="color:#4EC9B0;">Value</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 示例</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> V1</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ExtractValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#CE9178;">&quot;user:123&quot;</span><span style="color:#D4D4D4;">&gt;; </span><span style="color:#6A9955;">// &quot;123&quot;</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> V2</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ExtractValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#CE9178;">&quot;role:admin&quot;</span><span style="color:#D4D4D4;">&gt;; </span><span style="color:#6A9955;">// &quot;admin&quot;</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> V3</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">ExtractValue</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#CE9178;">&quot;nocolon&quot;</span><span style="color:#D4D4D4;">&gt;; </span><span style="color:#6A9955;">// &quot;nocolon&quot;（不匹配格式则返回自身）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_6-处理联合类型的推断" tabindex="-1"><a class="header-anchor" href="#_6-处理联合类型的推断"><span>6. 处理联合类型的推断</span></a></h4><p>在联合类型中，<code>infer</code> 会遵循“ distributive conditional types”规则，对联合类型的每个成员单独推断：</p><div class="language-typescript line-numbers-mode" data-highlighter="shiki" data-ext="typescript" data-title="typescript" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> UnwrapArray</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">&gt; = </span><span style="color:#4EC9B0;">T</span><span style="color:#569CD6;"> extends</span><span style="color:#4EC9B0;"> Array</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#569CD6;">infer</span><span style="color:#4EC9B0;"> Item</span><span style="color:#D4D4D4;">&gt; ? </span><span style="color:#4EC9B0;">Item</span><span style="color:#D4D4D4;"> : </span><span style="color:#4EC9B0;">T</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 对联合类型 (string[] | number[] | boolean) 推断</span></span>
<span class="line"><span style="color:#569CD6;">type</span><span style="color:#4EC9B0;"> Result</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">UnwrapArray</span><span style="color:#D4D4D4;">&lt;</span><span style="color:#4EC9B0;">string</span><span style="color:#D4D4D4;">[] | </span><span style="color:#4EC9B0;">number</span><span style="color:#D4D4D4;">[] | </span><span style="color:#4EC9B0;">boolean</span><span style="color:#D4D4D4;">&gt;; </span></span>
<span class="line"><span style="color:#6A9955;">// 等价于 UnwrapArray&lt;string[]&gt; | UnwrapArray&lt;number[]&gt; | UnwrapArray&lt;boolean&gt;</span></span>
<span class="line"><span style="color:#6A9955;">// 结果：string | number | boolean</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="核心价值" tabindex="-1"><a class="header-anchor" href="#核心价值"><span>核心价值</span></a></h3><p><code>infer</code> 的本质是<strong>让 TypeScript 自动完成“类型提取”的脏活</strong>，避免手动编写冗长的类型逻辑。它极大增强了 TypeScript 类型系统的灵活性，使得复杂的类型转换（如函数参数提取、Promise 解包、数组元素提取等）可以用简洁的方式实现。</p><p>在实际开发中，<code>infer</code> 常用于封装通用类型工具（如上述示例），或在库/框架中处理复杂的类型映射（如 React 中的 <code>React.ComponentProps</code> 就是通过 <code>infer</code> 提取组件的 props 类型）。</p>`,31),o=[p];function t(r,c){return n(),a("div",null,o)}const D=s(e,[["render",t],["__file","ts的infer介绍.html.vue"]]),y=JSON.parse('{"path":"/fe/ts/ts%E7%9A%84infer%E4%BB%8B%E7%BB%8D.html","title":"ts的infer介绍","lang":"zh-CN","frontmatter":{"description":"ts的infer介绍 在 TypeScript 中，infer 是条件类型（Conditional Types）中用于声明一个待推断的类型变量的关键字。它的核心作用是：在类型匹配过程中，让 TypeScript 自动推导并捕获某个位置的类型，从而简化复杂的类型提取、转换逻辑。 infer 只能在条件类型的 extends 子句中使用，语法通常为 inf...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/fe/ts/ts%E7%9A%84infer%E4%BB%8B%E7%BB%8D.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"ts的infer介绍"}],["meta",{"property":"og:description","content":"ts的infer介绍 在 TypeScript 中，infer 是条件类型（Conditional Types）中用于声明一个待推断的类型变量的关键字。它的核心作用是：在类型匹配过程中，让 TypeScript 自动推导并捕获某个位置的类型，从而简化复杂的类型提取、转换逻辑。 infer 只能在条件类型的 extends 子句中使用，语法通常为 inf..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-08-06T08:29:49.000Z"}],["meta",{"property":"article:modified_time","content":"2025-08-06T08:29:49.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"ts的infer介绍\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-08-06T08:29:49.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":3,"title":"核心应用场景","slug":"核心应用场景","link":"#核心应用场景","children":[]},{"level":3,"title":"核心价值","slug":"核心价值","link":"#核心价值","children":[]}],"git":{"updatedTime":1754468989000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"fe/ts/ts的infer介绍.md"}');export{D as comp,y as data};
