import{_ as s,o as l,c as n,e as a}from"./app-CnK5B_QS.js";const e={},o=a(`<h1 id="基础类型" tabindex="-1"><a class="header-anchor" href="#基础类型"><span>基础类型</span></a></h1><h2 id="_7-种基本类型" tabindex="-1"><a class="header-anchor" href="#_7-种基本类型"><span>7 种基本类型</span></a></h2><p>多数情况下，基本类型直接代表了最底层的语言实现。 所有基本类型的值都是不可改变的。但需要注意的是，基本类型本身和一个赋值为基本类型的变量的区别。变量会被赋予一个新值，而原值不能像数组、对象以及函数那样被改变。</p><p>有<strong>String</strong>、<strong>Boolean</strong>、<strong>Number</strong>三个包装类，这三个包装类的作用是为了能够创建这三个基本数据类型对象</p><ul><li>2个基本类型 <ul><li>string</li><li>boolean</li></ul></li><li>2个数字 <ul><li>number</li><li>bigint</li></ul></li><li>2个空 <ul><li>null</li><li>undefined</li></ul></li><li>特殊的symbol <ul><li>symbol (<strong>Symbol() 函数会返回 symbol 类型的值</strong>, <em>注意大小写</em>)</li></ul></li></ul><h3 id="string" tabindex="-1"><a class="header-anchor" href="#string"><span>String</span></a></h3><ul><li><code>var str = &#39;hello world&#39;</code>　　定义了一个 str 变量，同时给变量 str 赋值 &#39;hello world&#39; 字符串，此时 str 的值为字符串 &#39;hello world&#39;，类型为基本类型。</li><li><code>var str1 = String(&#39;hello world&#39;)</code>　　这是字符串声明的形式创建了字符串，此时 str1 的值也为字符串 &#39;hello world&#39;，类型为基本类型。</li><li><code>var str2 = new String(&#39;hello world&#39;)</code>　　此时的String为一个构造函数，而 new 操作符创建了一个字符串对象</li></ul><h3 id="symbol" tabindex="-1"><a class="header-anchor" href="#symbol"><span>Symbol</span></a></h3><p>下面的话注意区分大小写</p><ul><li><code>symbol</code> 是一种基本数据类型（<a href="https://developer.mozilla.org/zh-CN/docs/Glossary/Primitive" target="_blank" rel="noopener noreferrer">primitive data type</a>）。<code>Symbol()</code> 函数会返回 <strong>symbol</strong> 类型的值</li><li><code>Symbol.for()</code> 方法创建的的 symbol 会被放入一个全局 symbol 注册表中。<code>Symbol.for() 并不是每次都会创建一个新的 symbol</code>，它会首先检查给定的 key 是否已经在注册表中了。假如是，则会直接返回上次存储的那个。否则，它会再新建一个</li><li>\`Symbol.keyFor(sym)\`\` 用来获取全局 symbol 注册表中与某个 symbol 关联的键。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> globalSym</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">for</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;foo&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keyFor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">globalSym</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// &quot;foo&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> localSym</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">Symbol</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keyFor</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">localSym</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// undefined，</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Symbol.hasInstance</code>用于判断某对象是否为某构造器的实例。因此你可以用它自定义 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Operators/instanceof" target="_blank" rel="noopener noreferrer"><code>instanceof</code></a> 操作符在某个类上的行为。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Array1</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  static</span><span style="color:#D4D4D4;"> [</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">hasInstance</span><span style="color:#D4D4D4;">](</span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> Array</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">isArray</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">instance</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">([] </span><span style="color:#569CD6;">instanceof</span><span style="color:#4EC9B0;"> Array1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// expected output: true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><code>Symbol.isConcatSpreadable</code> 符号用于配置某对象作为<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/concat" target="_blank" rel="noopener noreferrer"><code>Array.prototype.concat()</code></a>方法的参数时是否展开其数组元素。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> alpha</span><span style="color:#D4D4D4;"> = [</span><span style="color:#CE9178;">&#39;a&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;b&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;c&#39;</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> numeric</span><span style="color:#D4D4D4;"> = [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> alphaNumeric</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">alpha</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">numeric</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">alphaNumeric</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, 1, 2, 3]</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">numeric</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">isConcatSpreadable</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">alphaNumeric</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">alpha</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">concat</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">numeric</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">alphaNumeric</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// expected output: Array [&quot;a&quot;, &quot;b&quot;, &quot;c&quot;, Array [1, 2, 3]]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li><strong>Symbol.iterator</strong> 为每一个对象定义了默认的迭代器。该迭代器可以被 <code>[for...of](https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Statements/for...of)</code> 循环使用。</li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> myIterable</span><span style="color:#D4D4D4;"> = {}</span></span>
<span class="line"><span style="color:#9CDCFE;">myIterable</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">Symbol</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">] = </span><span style="color:#569CD6;">function*</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 3</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"><span style="color:#D4D4D4;">[...</span><span style="color:#9CDCFE;">myIterable</span><span style="color:#D4D4D4;">] </span><span style="color:#6A9955;">// [1, 2, 3]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17),p=[o];function r(t,c){return l(),n("div",null,p)}const D=s(e,[["render",r],["__file","基础类型.html.vue"]]),d=JSON.parse('{"path":"/interview/code/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html","title":"基础类型","lang":"zh-CN","frontmatter":{"description":"基础类型 7 种基本类型 多数情况下，基本类型直接代表了最底层的语言实现。 所有基本类型的值都是不可改变的。但需要注意的是，基本类型本身和一个赋值为基本类型的变量的区别。变量会被赋予一个新值，而原值不能像数组、对象以及函数那样被改变。 有String、Boolean、Number三个包装类，这三个包装类的作用是为了能够创建这三个基本数据类型对象 2个基...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/code/%E5%9F%BA%E7%A1%80%E7%B1%BB%E5%9E%8B.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"基础类型"}],["meta",{"property":"og:description","content":"基础类型 7 种基本类型 多数情况下，基本类型直接代表了最底层的语言实现。 所有基本类型的值都是不可改变的。但需要注意的是，基本类型本身和一个赋值为基本类型的变量的区别。变量会被赋予一个新值，而原值不能像数组、对象以及函数那样被改变。 有String、Boolean、Number三个包装类，这三个包装类的作用是为了能够创建这三个基本数据类型对象 2个基..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T09:06:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T09:06:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"基础类型\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T09:06:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"7 种基本类型","slug":"_7-种基本类型","link":"#_7-种基本类型","children":[{"level":3,"title":"String","slug":"string","link":"#string","children":[]},{"level":3,"title":"Symbol","slug":"symbol","link":"#symbol","children":[]}]}],"git":{"updatedTime":1732093606000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/code/基础类型.md"}');export{D as comp,d as data};
