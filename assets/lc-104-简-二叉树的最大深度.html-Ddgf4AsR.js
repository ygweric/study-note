import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},o=l(`<h1 id="lc-104-简-二叉树的最大深度" tabindex="-1"><a class="header-anchor" href="#lc-104-简-二叉树的最大深度"><span>lc-104-简-二叉树的最大深度</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/maximum-depth-of-binary-tree</span></span>
<span class="line"><span style="color:#6A9955;">二叉树的 最大深度 是指从根节点到最远叶子节点的最长路径上的节点数。</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> getLogResultFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/logResult&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">TreeNode</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">generateTree</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/arr2tree&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> memoryTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/memoryTime&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> maxDepth</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#B5CEA8;"> 0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">max</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">maxDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#DCDCAA;">maxDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logResult</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLogResultFn</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> maxDepth</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">(...</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// 3</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// 2</span></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),p=[o];function t(r,c){return n(),a("div",null,p)}const i=s(e,[["render",t],["__file","lc-104-简-二叉树的最大深度.html.vue"]]),y=JSON.parse('{"path":"/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-104-%E7%AE%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html","title":"lc-104-简-二叉树的最大深度","lang":"zh-CN","frontmatter":{"description":"lc-104-简-二叉树的最大深度","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-104-%E7%AE%80-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E6%9C%80%E5%A4%A7%E6%B7%B1%E5%BA%A6.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-104-简-二叉树的最大深度"}],["meta",{"property":"og:description","content":"lc-104-简-二叉树的最大深度"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-104-简-二叉树的最大深度\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/二叉树/lc-104-简-二叉树的最大深度.md"}');export{i as comp,y as data};
