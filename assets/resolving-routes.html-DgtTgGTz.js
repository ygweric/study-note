import{_ as t,r as p,o as r,c,a as e,b as s,d as o,w as n,e as l}from"./app-CnK5B_QS.js";const i={},d=e("h1",{id:"解析路由",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#解析路由"},[e("span",null,"解析路由")])],-1),D=e("h2",{id:"获取全部路由",tabindex:"-1"},[e("a",{class:"header-anchor",href:"#获取全部路由"},[e("span",null,"获取全部路由")])],-1),u=l(`<p><code>useRoutes</code> 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">useRoutes</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vuepress/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> routes</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">useRoutes</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#6A9955;">// {</span></span>
<span class="line"><span style="color:#6A9955;">//   &#39;/&#39;: { meta: { title: &#39;Home&#39; }, loader: HomePageLoader },</span></span>
<span class="line"><span style="color:#6A9955;">//   &#39;/404.html&#39;: { meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader },</span></span>
<span class="line"><span style="color:#6A9955;">//   ...</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> routePaths</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">computed</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#9CDCFE;"> Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">routes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"><span style="color:#6A9955;">// =&gt; [’/‘, &#39;/404.html&#39;, &#39;/foo/&#39;, &#39;/bar/&#39;, ...]</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由地址" tabindex="-1"><a class="header-anchor" href="#解析路由地址"><span>解析路由地址</span></a></h2>`,3),y=l(`<p><code>resolveRoutePath</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由地址:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">resolveRoutePath</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vuepress/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> routePath</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveRoutePath</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/foo/&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// =&gt; &#39;/foo/&#39;</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> routePath</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveRoutePath</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;baz.html&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;/foo/bar.html&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// =&gt; &#39;/foo/baz.html&#39;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="解析路由信息" tabindex="-1"><a class="header-anchor" href="#解析路由信息"><span>解析路由信息</span></a></h2>`,3),m=l(`<p><code>resolveRoute</code> 接收一个链接地址和一个可选的基础路径，返回一个解析后的路由信息:</p><div class="language-ts line-numbers-mode" data-highlighter="shiki" data-ext="ts" data-title="ts" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">resolveRoute</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vuepress/client&#39;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> route</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveRoute</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/foo/&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// =&gt; { notFound: false, path: &#39;/foo/&#39;, meta: { title: &#39;Foo&#39; }, loader: FooPageLoader }</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> route</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveRoute</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;baz.html&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;/foo/bar.html&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// =&gt; { notFound: false, path: &#39;/foo/baz.html&#39;, meta: { title: &#39;Baz&#39; }, loader: BazPageLoader }</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> route</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">resolveRoute</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/not-exist.html&#39;</span><span style="color:#D4D4D4;">) </span><span style="color:#6A9955;">// =&gt; { notFound: true, path: &#39;/not-exist.html&#39;, meta: { title: &#39;Not Found&#39; }, loader: NotFoundPageLoader }</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>路由信息中存在一个 <code>notFound</code> 字段，用于标识给定的路径是否存在对应的路由。当路由不存在时，返回值中的 <code>notFound</code> 字段为 <code>true</code>，其 <code>path</code> 字段为规范化后的路径，而 <code>meta</code> 和 <code>loader</code> 字段则会指向默认的 404 页面。</p>`,3);function h(v,C){const a=p("RouteLink");return r(),c("div",null,[d,D,e("p",null,[s("在开发主题和插件时，你可能希望获取所有页面的信息。通过 "),o(a,{to:"/reference/client-api.html#useroutes"},{default:n(()=>[s("useRoutes")]),_:1}),s(" 就可以获取所有页面的路由记录。")]),u,e("p",null,[s("你可以使用 "),o(a,{to:"/reference/client-api.html#resolveroutepath"},{default:n(()=>[s("resolveRoutePath")]),_:1}),s(" 来解析给定的链接对应的路由路径。")]),y,e("p",null,[s("你可以使用 "),o(a,{to:"/reference/client-api.html#resolveroute"},{default:n(()=>[s("resolveRoute")]),_:1}),s(" 来解析给定的链接对应的路由信息。")]),m])}const b=t(i,[["render",h],["__file","resolving-routes.html.vue"]]),f=JSON.parse('{"path":"/advanced/cookbook/resolving-routes.html","title":"解析路由","lang":"zh-CN","frontmatter":{"description":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 来解析给定的链接对应的路由路径。 resolveRoutePath 接收一个链接地址和一个...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/advanced/cookbook/resolving-routes.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"解析路由"}],["meta",{"property":"og:description","content":"解析路由 获取全部路由 在开发主题和插件时，你可能希望获取所有页面的信息。通过 就可以获取所有页面的路由记录。 useRoutes 的返回值是一个包含了所有路由信息的 Ref 对象。其属性是每条路由的路由路径，对应的值是路径的路由信息。 解析路由地址 你可以使用 来解析给定的链接对应的路由路径。 resolveRoutePath 接收一个链接地址和一个..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-09-02T09:33:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-09-02T09:33:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"解析路由\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-09-02T09:33:25.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"获取全部路由","slug":"获取全部路由","link":"#获取全部路由","children":[]},{"level":2,"title":"解析路由地址","slug":"解析路由地址","link":"#解析路由地址","children":[]},{"level":2,"title":"解析路由信息","slug":"解析路由信息","link":"#解析路由信息","children":[]}],"git":{"updatedTime":1725269605000,"contributors":[{"name":"yanggw","email":"yanggw@glodon.com","commits":2}]},"autoDesc":true,"filePathRelative":"advanced/cookbook/resolving-routes.md"}');export{b as comp,f as data};
