import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},p=l(`<h1 id="异步" tabindex="-1"><a class="header-anchor" href="#异步"><span>异步</span></a></h1><h2 id="generator" tabindex="-1"><a class="header-anchor" href="#generator"><span>generator</span></a></h2><h3 id="function" tabindex="-1"><a class="header-anchor" href="#function"><span>function</span></a></h3><p><code>function* name([param[, param[, ... param]]]) { statements }</code></p><h3 id="包括元素" tabindex="-1"><a class="header-anchor" href="#包括元素"><span>包括元素</span></a></h3><ul><li>yeild</li><li>next()</li></ul><p><strong><code>function*</code></strong> 这种声明方式 (<code>function</code>关键字后跟一个星号）会定义一个<strong>生成器函数</strong> (generator function)，它返回一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Generator" target="_blank" rel="noopener noreferrer"><code>Generator</code></a> 对象。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> generator</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> gen</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">generator</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// expected output: 10</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#6A9955;">// expected output: 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">(){</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#B5CEA8;"> 10</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">    x</span><span style="color:#D4D4D4;">=</span><span style="color:#C586C0;">yield</span><span style="color:#CE9178;"> &#39;foo&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#9CDCFE;"> x</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> gen_obj</span><span style="color:#D4D4D4;">=</span><span style="color:#DCDCAA;">gen</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen_obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">());</span><span style="color:#6A9955;">// 执行 yield 10，返回 10</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen_obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">());</span><span style="color:#6A9955;">// 执行 yield &#39;foo&#39;，返回 &#39;foo&#39;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen_obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">100</span><span style="color:#D4D4D4;">));</span><span style="color:#6A9955;">// 将 100 赋给上一条 yield &#39;foo&#39; 的左值，即执行 x=100，返回 100</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen_obj</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">());</span><span style="color:#6A9955;">// 执行完毕，value 为 undefined，done 为 true</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="yield" tabindex="-1"><a class="header-anchor" href="#yield"><span><code>yield*</code></span></a></h3><p>或者如果用的是 <code>yield*</code>（多了个星号），则表示将执行权移交给另一个生成器函数（当前生成器暂停执行）。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> anotherGenerator</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> generator</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">){</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#569CD6;">*</span><span style="color:#DCDCAA;"> anotherGenerator</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">i</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">// 移交执行权</span></span>
<span class="line"><span style="color:#C586C0;">  yield</span><span style="color:#9CDCFE;"> i</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> gen</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">generator</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">10</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 10</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 11</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 12</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 13</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">gen</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 20</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>传递参数</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#569CD6;"> *</span><span style="color:#DCDCAA;">createIterator</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> first</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#B5CEA8;"> 1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> second</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#9CDCFE;"> first</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">; </span><span style="color:#6A9955;">// 4 + 2</span></span>
<span class="line"><span style="color:#6A9955;">                                  // first =4 是 next(4) 将参数赋给上一条的</span></span>
<span class="line"><span style="color:#C586C0;">    yield</span><span style="color:#9CDCFE;"> second</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">;             </span><span style="color:#6A9955;">// 5 + 3</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> iterator</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createIterator</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">());    </span><span style="color:#6A9955;">// &quot;{ value: 1, done: false }&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">));   </span><span style="color:#6A9955;">// &quot;{ value: 6, done: false }&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">));   </span><span style="color:#6A9955;">// &quot;{ value: 8, done: false }&quot;</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">());    </span><span style="color:#6A9955;">// &quot;{ value: undefined, done: true }&quot;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="手写promise" tabindex="-1"><a class="header-anchor" href="#手写promise"><span>手写promise</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">handleFn</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">thenFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">catchFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">null</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">thenFn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">thenFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">thenFn</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">catchFn</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">catchFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">catchFn</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> this</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> resolveFn</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">thenFn</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">thenFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#DCDCAA;"> rejectFn</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">catchFn</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">catchFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  handleFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">resolveFn</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">rejectFn</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;begin&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> MyPromise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">reject</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;run promise body&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">  setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">    resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;success&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#6A9955;">    // reject(&#39;fail&#39;)</span></span>
<span class="line"><span style="color:#D4D4D4;">  }, </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">err</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="await实现" tabindex="-1"><a class="header-anchor" href="#await实现"><span>await实现</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * async的实现</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@author</span><span style="color:#4EC9B0;"> waldon</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {*}</span><span style="color:#9CDCFE;"> generatorFn</span><span style="color:#6A9955;"> - 生成器函数</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> asyncWrapper</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">generatorFn</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">    const</span><span style="color:#4FC1FF;"> iterator</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">generatorFn</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> generator</span><span style="color:#D4D4D4;"> = { </span><span style="color:#9CDCFE;">done:</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> count</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">100</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">count</span><span style="color:#D4D4D4;">--) {</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">generator</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">done</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">        })</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#DCDCAA;">        resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">generator</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">    iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">().</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // console.log(res)</span></span>
<span class="line"><span style="color:#9CDCFE;">      iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#569CD6;"> =&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // console.log(res)</span></span>
<span class="line"><span style="color:#9CDCFE;">        console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">iterator</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">next</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">value</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">      })</span></span>
<span class="line"><span style="color:#D4D4D4;">    })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">  })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 测试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#DCDCAA;"> getDate</span><span style="color:#D4D4D4;"> = () </span><span style="color:#569CD6;">=&gt;</span><span style="color:#569CD6;"> new</span><span style="color:#4EC9B0;"> Promise</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">resolve</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> setTimeout</span><span style="color:#D4D4D4;">(() </span><span style="color:#569CD6;">=&gt;</span><span style="color:#DCDCAA;"> resolve</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">Date</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">now</span><span style="color:#D4D4D4;">()), </span><span style="color:#B5CEA8;">1000</span><span style="color:#D4D4D4;">))</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">function*</span><span style="color:#DCDCAA;"> testG</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> date</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#DCDCAA;"> getDate</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;date: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">date</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> date2</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">yield</span><span style="color:#DCDCAA;"> getDate</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;date2: &#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">date2</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#CE9178;"> &#39;success&#39;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// const iterator = testG()</span></span>
<span class="line"><span style="color:#6A9955;">// iterator.next().value.then(res =&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">//   // console.log(res)</span></span>
<span class="line"><span style="color:#6A9955;">//   iterator.next(res).value.then(res =&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">//     // console.log(res)</span></span>
<span class="line"><span style="color:#6A9955;">//     console.log(iterator.next(res).value);</span></span>
<span class="line"><span style="color:#6A9955;">//   })</span></span>
<span class="line"><span style="color:#6A9955;">// })</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">asyncWrapper</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">testG</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">res</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">})</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 期望顺序输出 date date2 success</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,18),o=[p];function D(c,r){return n(),a("div",null,o)}const i=s(e,[["render",D],["__file","异步.html.vue"]]),y=JSON.parse('{"path":"/interview/code/%E5%BC%82%E6%AD%A5.html","title":"异步","lang":"zh-CN","frontmatter":{"description":"异步 generator function function* name([param[, param[, ... param]]]) { statements } 包括元素 yeild next() function* 这种声明方式 (function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个 Ge...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/code/%E5%BC%82%E6%AD%A5.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"异步"}],["meta",{"property":"og:description","content":"异步 generator function function* name([param[, param[, ... param]]]) { statements } 包括元素 yeild next() function* 这种声明方式 (function关键字后跟一个星号）会定义一个生成器函数 (generator function)，它返回一个 Ge..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:17:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:17:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"异步\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:17:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"generator","slug":"generator","link":"#generator","children":[{"level":3,"title":"function","slug":"function","link":"#function","children":[]},{"level":3,"title":"包括元素","slug":"包括元素","link":"#包括元素","children":[]},{"level":3,"title":"yield*","slug":"yield","link":"#yield","children":[]}]},{"level":2,"title":"手写promise","slug":"手写promise","link":"#手写promise","children":[]},{"level":2,"title":"await实现","slug":"await实现","link":"#await实现","children":[]}],"git":{"updatedTime":1732090659000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":2}]},"autoDesc":true,"filePathRelative":"interview/code/异步.md"}');export{i as comp,y as data};
