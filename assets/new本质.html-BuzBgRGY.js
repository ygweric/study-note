import{_ as s,o as n,c as e,e as a}from"./app-CnK5B_QS.js";const o="/assets/Pasted%20image%2020241120165725-HCghsTCG.png",l="/assets/Pasted%20image%2020241120165736-ypfaVx1Q.png",p={},t=a(`<h1 id="js中new的本质" tabindex="-1"><a class="header-anchor" href="#js中new的本质"><span>js中new的本质</span></a></h1><ol><li><code>var obj = new Object();</code> 创建一个新对象</li><li><code>obj.__proto__ = fn.prototype;</code>将创建新对象中的__proto__（隐式原型）指向原函数中的prototype（显示原型）,</li><li><code>fn.call(obj);</code> 将原函数中的<code>this</code>，指向创建好的这个新对象</li><li>判断原函数是否主动返回对象，如果没有那么new出来的就是这个新对象（1,2,3步骤创建的）</li></ol><h2 id="demo-1" tabindex="-1"><a class="header-anchor" href="#demo-1"><span>demo-1</span></a></h2><p><strong><code>new</code> 一个对象</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;rrr&#39;</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>替换实现<code>new</code></strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"><span style="color:#6A9955;">  // var obj = new Object();</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">create</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">fn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  fn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">() { }</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Object</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">fn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  fn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码在浏览器中运行如下 <img src="`+o+`" alt=""></p><h2 id="demo-2" tabindex="-1"><a class="header-anchor" href="#demo-2"><span>demo-2</span></a></h2><p><strong><code>new</code> 一个对象</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;rrr&#39;</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>替换实现<code>new</code></strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">  function</span><span style="color:#DCDCAA;"> fn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">) {</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> }</span></span>
<span class="line"><span style="color:#569CD6;">  var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Object</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">  obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">__proto__</span><span style="color:#D4D4D4;"> = </span><span style="color:#4EC9B0;">fn</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">prototype</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#9CDCFE;">  fn</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">call</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;rrr&#39;</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>以上代码在浏览器中运行如下 <img src="`+l+'" alt=""></p>',16),r=[t];function c(D,i){return n(),e("div",null,r)}const y=s(p,[["render",c],["__file","new本质.html.vue"]]),C=JSON.parse('{"path":"/interview/code/new%E6%9C%AC%E8%B4%A8.html","title":"js中new的本质","lang":"zh-CN","frontmatter":{"description":"js中new的本质 var obj = new Object(); 创建一个新对象 obj.__proto__ = fn.prototype;将创建新对象中的__proto__（隐式原型）指向原函数中的prototype（显示原型）, fn.call(obj); 将原函数中的this，指向创建好的这个新对象 判断原函数是否主动返回对象，如果没有那么ne...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/code/new%E6%9C%AC%E8%B4%A8.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"js中new的本质"}],["meta",{"property":"og:description","content":"js中new的本质 var obj = new Object(); 创建一个新对象 obj.__proto__ = fn.prototype;将创建新对象中的__proto__（隐式原型）指向原函数中的prototype（显示原型）, fn.call(obj); 将原函数中的this，指向创建好的这个新对象 判断原函数是否主动返回对象，如果没有那么ne..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T09:06:46.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T09:06:46.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js中new的本质\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T09:06:46.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"demo-1","slug":"demo-1","link":"#demo-1","children":[]},{"level":2,"title":"demo-2","slug":"demo-2","link":"#demo-2","children":[]}],"git":{"updatedTime":1732093606000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/code/new本质.md"}');export{y as comp,C as data};
