import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},o=l(`<h1 id="this" tabindex="-1"><a class="header-anchor" href="#this"><span>this</span></a></h1><p>参考 <a href="https://segmentfault.com/a/1190000004580525" target="_blank" rel="noopener noreferrer">快速理解JavaScript中this的用法与陷阱</a><a href="https://segmentfault.com/a/1190000040193339" target="_blank" rel="noopener noreferrer">javascript关于this的用法</a></p><p>如果你写过 Java ，你可能接触过this——一般指向当前对象，实际上，这时候this的含义已经确定了，因为Java属于编译期绑定，而JS属于运行期绑定，所以导致this的含义在运行过程中可能有多种变化。 进一步说，this和它声明环境无关，而完全取决于他的执行环境。务必牢记这句话。</p><p>进一步说，<strong>this和它声明环境无关，而完全取决于他的执行环境</strong>。务必牢记这句话。</p><h2 id="全局this" tabindex="-1"><a class="header-anchor" href="#全局this"><span>全局this</span></a></h2><p><strong>node.js</strong></p><ul><li><code>this</code> 是 <code>{}</code></li><li><code>var</code> 变量不挂载 <strong>浏览器</strong></li><li><code>this</code> 是 <code>window</code></li><li><code>var</code> 变量挂载在<code>window</code></li></ul><h2 id="三句话总结this用法" tabindex="-1"><a class="header-anchor" href="#三句话总结this用法"><span>三句话总结this用法：</span></a></h2><ol><li>全局作用域：全局作用域中的 this 指向window。</li><li>函数作用域：方法中的 this 指向调用它的对象；如果没有调用者就指向window。</li><li>构造函数里：构造函数（或者ES6+的类）中的 this 指向新生成的实例对象。</li><li><code>setTimeout</code> 和 <code>setInterval</code> 包裹的this指向<code>window</code></li></ol><h2 id="在闭包中使用-this-对象" tabindex="-1"><a class="header-anchor" href="#在闭包中使用-this-对象"><span>在闭包中使用 <code>this</code> 对象</span></a></h2><p>进一步说，<strong>this和它声明环境无关，而完全取决于他的执行环境</strong>。务必牢记这句话。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;The window&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> object</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;my Object&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">    getName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">            return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">        }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">()()); </span><span style="color:#6A9955;">// The window</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>第一个就是正常的调用，打印 <code>“my Object”</code></li><li>第二个就是在调用这个方法前先给它加上了括号，但是和 object.getName 是一样的，所以打印为 <code>&quot;my Object&quot;</code></li><li>第三个是先执行了一个赋值语句，然后再调用赋值后的结果。因为这个赋值表达式是函数本身，所以此时调用，<code>this</code> 指向的是 <code>window</code>，打印的是 <code>&quot;The window&quot;</code></li></ul><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;The window&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> object</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">    name:</span><span style="color:#CE9178;"> &#39;my Object&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">    getName</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#C586C0;">        return</span><span style="color:#569CD6;"> this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">getName</span><span style="color:#D4D4D4;">()); </span><span style="color:#6A9955;">// my Object</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">getName</span><span style="color:#D4D4D4;">)()); </span><span style="color:#6A9955;">// my Object</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">getName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">object</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">getName</span><span style="color:#D4D4D4;">)()); </span><span style="color:#6A9955;">// The window</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="代码示例" tabindex="-1"><a class="header-anchor" href="#代码示例"><span>代码示例：</span></a></h2><h3 id="commonjs-中使用this" tabindex="-1"><a class="header-anchor" href="#commonjs-中使用this"><span>CommonJS 中使用this</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> </span></span>
<span class="line"><span style="color:#6A9955;">快速理解JavaScript中this的用法与陷阱</span></span>
<span class="line"><span style="color:#6A9955;">https://segmentfault.com/a/1190000004580525</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&#39;罗恩&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> aaa</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;哈利&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  say</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> bbb</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;赫敏&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#9CDCFE;">  say:</span><span style="color:#9CDCFE;"> aaa</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">say</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">/* 生命的bbb等价于下面 */</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> bbb</span><span style="color:#D4D4D4;"> = {</span></span>
<span class="line"><span style="color:#9CDCFE;">  name:</span><span style="color:#CE9178;"> &#39;赫敏&#39;</span><span style="color:#D4D4D4;">,</span></span>
<span class="line"><span style="color:#DCDCAA;">  say</span><span style="color:#9CDCFE;">:</span><span style="color:#569CD6;"> function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#9CDCFE;">    console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"><span style="color:#6A9955;">//&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> ccc</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">aaa</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">say</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">aaa</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">say</span><span style="color:#D4D4D4;">();    </span><span style="color:#6A9955;">//哈利</span></span>
<span class="line"><span style="color:#9CDCFE;">bbb</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">say</span><span style="color:#D4D4D4;">();    </span><span style="color:#6A9955;">//赫敏</span></span>
<span class="line"><span style="color:#DCDCAA;">ccc</span><span style="color:#D4D4D4;">();        </span><span style="color:#6A9955;">//罗恩 在nodejs是undefined， 在浏览器是 罗恩</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">this</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="es5、es6使用this" tabindex="-1"><a class="header-anchor" href="#es5、es6使用this"><span>ES5、ES6使用this</span></a></h3><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// es5 构造函数</span></span>
<span class="line"><span style="color:#569CD6;">function</span><span style="color:#DCDCAA;"> NewClass</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">  this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;es5-Class&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#9CDCFE;"> obj</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> NewClass</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">// 输出newClass</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// es6+ 类定义</span></span>
<span class="line"><span style="color:#569CD6;">class</span><span style="color:#4EC9B0;"> Es6Class</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  constructor</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#569CD6;">    this</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;"> = </span><span style="color:#CE9178;">&quot;es6-Class&quot;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">let</span><span style="color:#9CDCFE;"> obj2</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">new</span><span style="color:#DCDCAA;"> Es6Class</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">obj2</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">name</span><span style="color:#D4D4D4;">);</span><span style="color:#6A9955;">// 输出es6Class</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,19),p=[o];function t(c,i){return n(),a("div",null,p)}const D=s(e,[["render",t],["__file","this.html.vue"]]),d=JSON.parse('{"path":"/interview/code/this.html","title":"this","lang":"zh-CN","frontmatter":{"description":"this 参考 快速理解JavaScript中this的用法与陷阱 javascript关于this的用法 如果你写过 Java ，你可能接触过this——一般指向当前对象，实际上，这时候this的含义已经确定了，因为Java属于编译期绑定，而JS属于运行期绑定，所以导致this的含义在运行过程中可能有多种变化。 进一步说，this和它声明环境无关，而...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/code/this.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"this"}],["meta",{"property":"og:description","content":"this 参考 快速理解JavaScript中this的用法与陷阱 javascript关于this的用法 如果你写过 Java ，你可能接触过this——一般指向当前对象，实际上，这时候this的含义已经确定了，因为Java属于编译期绑定，而JS属于运行期绑定，所以导致this的含义在运行过程中可能有多种变化。 进一步说，this和它声明环境无关，而..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:53:51.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:53:51.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"this\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:53:51.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"全局this","slug":"全局this","link":"#全局this","children":[]},{"level":2,"title":"三句话总结this用法：","slug":"三句话总结this用法","link":"#三句话总结this用法","children":[]},{"level":2,"title":"在闭包中使用 this 对象","slug":"在闭包中使用-this-对象","link":"#在闭包中使用-this-对象","children":[]},{"level":2,"title":"代码示例：","slug":"代码示例","link":"#代码示例","children":[{"level":3,"title":"CommonJS 中使用this","slug":"commonjs-中使用this","link":"#commonjs-中使用this","children":[]},{"level":3,"title":"ES5、ES6使用this","slug":"es5、es6使用this","link":"#es5、es6使用this","children":[]}]}],"git":{"updatedTime":1732092831000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/code/this.md"}');export{D as comp,d as data};
