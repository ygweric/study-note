import{_ as e,o as a,c as t,e as i}from"./app-CnK5B_QS.js";const o={},l=i('<h1 id="微前端" tabindex="-1"><a class="header-anchor" href="#微前端"><span>微前端</span></a></h1><h2 id="微前端架构具备以下几个核心价值" tabindex="-1"><a class="header-anchor" href="#微前端架构具备以下几个核心价值"><span>微前端架构具备以下几个核心价值：</span></a></h2><ul><li><p>技术栈无关<br> 主框架不限制接入应用的技术栈，微应用具备完全自主权</p></li><li><p>独立开发、独立部署<br> 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新</p></li><li><p>增量升级 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略</p></li><li><p>独立运行时<br> 每个微应用之间状态隔离，运行时状态不共享</p></li></ul><h2 id="为什么iframe不合适做微前端" tabindex="-1"><a class="header-anchor" href="#为什么iframe不合适做微前端"><span>为什么iframe不合适做微前端</span></a></h2><ol><li>url 不同步。浏览器刷新 iframe url 状态丢失、后退前进按钮无法使用。</li><li>UI 不同步，DOM 结构不共享。想象一下屏幕右下角 1/4 的 iframe 里来一个带遮罩层的弹框，同时我们要求这个弹框要浏览器居中显示，还要浏览器 resize 时自动居中..</li><li>全局上下文完全隔离，内存变量不共享。iframe 内外系统的通信、数据同步等需求，主应用的 cookie 要透传到根域名都不同的子应用中实现免登效果。</li><li>慢。每次子应用进入都是一次浏览器上下文重建、资源重新加载的过程。</li></ol><p>其中有的问题比较好解决(问题1)，有的问题我们可以睁一只眼闭一只眼(问题4)，但有的问题我们则很难解决(问题3)甚至无法解决(问题2)，而这些无法解决的问题恰恰又会给产品带来非常严重的体验问题， 最终导致我们舍弃了 iframe 方案。</p><h2 id="三个最关键问题" tabindex="-1"><a class="header-anchor" href="#三个最关键问题"><span>三个最关键问题：</span></a></h2><ol><li>子应用如何定义和使用？</li><li>如何动态加载？</li><li>如何隔离？</li></ol><h2 id="shadow-dom" tabindex="-1"><a class="header-anchor" href="#shadow-dom"><span>shadow DOM</span></a></h2><p>有一些 Shadow DOM 特有的术语需要我们了解：</p><ul><li>Shadow host：一个常规 DOM 节点，Shadow DOM 会被附加到这个节点上。</li><li>Shadow tree：Shadow DOM 内部的 DOM 树。</li><li>Shadow boundary：Shadow DOM 结束的地方，也是常规 DOM 开始的地方。</li><li>Shadow root: Shadow tree 的根节点。</li></ul><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>可以使用 <code>Element.attachShadow()</code> 方法来将一个 <code>shadow root</code> 附加到任何一个元素上</p>',13),r=[l];function n(d,h){return a(),t("div",null,r)}const s=e(o,[["render",n],["__file","微前端.html.vue"]]),p=JSON.parse('{"path":"/interview/code/%E5%BE%AE%E5%89%8D%E7%AB%AF.html","title":"微前端","lang":"zh-CN","frontmatter":{"description":"微前端 微前端架构具备以下几个核心价值： 技术栈无关 主框架不限制接入应用的技术栈，微应用具备完全自主权 独立开发、独立部署 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 增量升级 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 独立运行时 每个微应...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/code/%E5%BE%AE%E5%89%8D%E7%AB%AF.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"微前端"}],["meta",{"property":"og:description","content":"微前端 微前端架构具备以下几个核心价值： 技术栈无关 主框架不限制接入应用的技术栈，微应用具备完全自主权 独立开发、独立部署 微应用仓库独立，前后端可独立开发，部署完成后主框架自动完成同步更新 增量升级 在面对各种复杂场景时，我们通常很难对一个已经存在的系统做全量的技术栈升级或重构，而微前端是一种非常好的实施渐进式重构的手段和策略 独立运行时 每个微应..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:17:39.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:17:39.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"微前端\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:17:39.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"微前端架构具备以下几个核心价值：","slug":"微前端架构具备以下几个核心价值","link":"#微前端架构具备以下几个核心价值","children":[]},{"level":2,"title":"为什么iframe不合适做微前端","slug":"为什么iframe不合适做微前端","link":"#为什么iframe不合适做微前端","children":[]},{"level":2,"title":"三个最关键问题：","slug":"三个最关键问题","link":"#三个最关键问题","children":[]},{"level":2,"title":"shadow DOM","slug":"shadow-dom","link":"#shadow-dom","children":[{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]}]}],"git":{"updatedTime":1732090659000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":2}]},"autoDesc":true,"filePathRelative":"interview/code/微前端.md"}');export{s as comp,p as data};
