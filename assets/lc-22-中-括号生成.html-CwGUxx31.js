import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},p=l(`<h1 id="lc-22-中-括号生成" tabindex="-1"><a class="header-anchor" href="#lc-22-中-括号生成"><span>lc-22-中-括号生成</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/IDBivT/description/</span></span>
<span class="line"><span style="color:#6A9955;">正整数 n 代表生成括号的对数，请设计一个函数，用于能够生成所有可能的并且 有效的 括号组合。</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">1. 很简单，一遍过，都不需要调试</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> generateParenthesis</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> results</span><span style="color:#D4D4D4;"> = [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#DCDCAA;"> backtrack</span><span style="color:#D4D4D4;"> = (</span><span style="color:#9CDCFE;">currentArr</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> results</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">join</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;&quot;</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    // openCount &lt; closeCount would NOT happened</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">      // begin new</span></span>
<span class="line"><span style="color:#9CDCFE;">      currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;(&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">      backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentArr</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">      currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;)&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">      backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentArr</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;"> &lt; </span><span style="color:#9CDCFE;">n</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#9CDCFE;">        currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;(&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#DCDCAA;">        backtrack</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">currentArr</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">openCount</span><span style="color:#D4D4D4;"> + </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">closeCount</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">        currentArr</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">  backtrack</span><span style="color:#D4D4D4;">([], </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> results</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateParenthesis</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// [&quot;((()))&quot;,&quot;(()())&quot;,&quot;(())()&quot;,&quot;()(())&quot;,&quot;()()()&quot;]</span></span>
<span class="line"><span style="color:#9CDCFE;">console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateParenthesis</span><span style="color:#D4D4D4;">(</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">)); </span><span style="color:#6A9955;">// [&quot;()&quot;]</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(generateParenthesis(xxxxx)); // xxxxx</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(generateParenthesis(xxxxx)); // xxxxx</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(generateParenthesis(xxxxx)); // xxxxx</span></span>
<span class="line"><span style="color:#6A9955;">// console.log(generateParenthesis(xxxxx)); // xxxxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[p];function c(t,r){return n(),a("div",null,o)}const i=s(e,[["render",c],["__file","lc-22-中-括号生成.html.vue"]]),y=JSON.parse('{"path":"/interview/algorithm/%E5%BE%85%E5%88%86%E7%B1%BB/lc-22-%E4%B8%AD-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html","title":"lc-22-中-括号生成","lang":"zh-CN","frontmatter":{"description":"lc-22-中-括号生成","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E5%BE%85%E5%88%86%E7%B1%BB/lc-22-%E4%B8%AD-%E6%8B%AC%E5%8F%B7%E7%94%9F%E6%88%90.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-22-中-括号生成"}],["meta",{"property":"og:description","content":"lc-22-中-括号生成"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-22-中-括号生成\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/待分类/lc-22-中-括号生成.md"}');export{i as comp,y as data};
