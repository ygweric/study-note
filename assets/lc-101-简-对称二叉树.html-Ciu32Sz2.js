import{_ as s,o as n,c as l,e as a}from"./app-CnK5B_QS.js";const p={},e=a(`<h1 id="lc-101-简-对称二叉树" tabindex="-1"><a class="header-anchor" href="#lc-101-简-对称二叉树"><span>lc-101-简-对称二叉树</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/symmetric-tree</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">给你一个二叉树的根节点 root ， 检查它是否轴对称。</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> getLogResultFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/logResult&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">TreeNode</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">generateTree</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/arr2tree&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> memoryTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/memoryTime&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">  递归用loop来实现，就可以实现对比了，一会试试</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  1. 一把搞定，但内存有点多，估计和递归有关系</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,68,ms,击败,66.47%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,50.18,MB,击败,5.07%,使用 JavaScript 的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  2. 用loop代替递归试试</span></span>
<span class="line"><span style="color:#6A9955;">    边缘条件和数组比较多，修改好几次才成功，不过空间占用多</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,72,ms,击败,47.19%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,50.64,MB,击败,5.07%,使用 JavaScript 的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">   官方题解实际是1.js，好像是我本地执行的慢，不知道</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> isSymmetric</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> ^ !!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; !</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#569CD6;"> true</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> leftStack</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> rightStack</span><span style="color:#D4D4D4;"> = [</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">leftStack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">rightStack</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &gt; </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> leftParent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">leftStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> rightParent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">rightStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span></span>
<span class="line"><span style="color:#9CDCFE;">      leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> ||</span></span>
<span class="line"><span style="color:#D4D4D4;">      !!</span><span style="color:#9CDCFE;">leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> ^ !!</span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> || </span><span style="color:#6A9955;">// 只有一个为null</span></span>
<span class="line"><span style="color:#9CDCFE;">      leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> ||</span></span>
<span class="line"><span style="color:#9CDCFE;">      leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;"> !== </span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">?.</span><span style="color:#9CDCFE;">val</span></span>
<span class="line"><span style="color:#D4D4D4;">    ) {</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#569CD6;"> false</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">    leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">leftStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">    leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">leftStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">leftParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">    rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">rightStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">    rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">rightStack</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">rightParent</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#569CD6;"> true</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logResult</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLogResultFn</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> isSymmetric</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">(...</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">//  true</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// false</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// false</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// true</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">( [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// true</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">( [</span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">8</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// false</span></span>
<span class="line"><span style="color:#6A9955;">// logResult( xxxxxxx); //</span></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">//</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// let getTreeValue = (base, stack)=&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">//   stack.push(base?.val)</span></span>
<span class="line"><span style="color:#6A9955;">//   if (!base) {</span></span>
<span class="line"><span style="color:#6A9955;">//     return</span></span>
<span class="line"><span style="color:#6A9955;">//   }</span></span>
<span class="line"><span style="color:#6A9955;">//   let left = getTreeValue( base.left, stack)</span></span>
<span class="line"><span style="color:#6A9955;">//   if (left) {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">//   }</span></span>
<span class="line"><span style="color:#6A9955;">// }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// let isSameTree = (lt, rt) =&gt; {</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// let dfs = (node, stack) =&gt; {</span></span>
<span class="line"><span style="color:#6A9955;">//   dfs(node.left);</span></span>
<span class="line"><span style="color:#6A9955;">//   dfs(node.right);</span></span>
<span class="line"><span style="color:#6A9955;">// };</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// dfs(root.left);</span></span>
<span class="line"><span style="color:#6A9955;">// dfs(root.right);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[e];function c(t,r){return n(),l("div",null,o)}const i=s(p,[["render",c],["__file","lc-101-简-对称二叉树.html.vue"]]),y=JSON.parse('{"path":"/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-101-%E7%AE%80-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html","title":"lc-101-简-对称二叉树","lang":"zh-CN","frontmatter":{"description":"lc-101-简-对称二叉树","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-101-%E7%AE%80-%E5%AF%B9%E7%A7%B0%E4%BA%8C%E5%8F%89%E6%A0%91.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-101-简-对称二叉树"}],["meta",{"property":"og:description","content":"lc-101-简-对称二叉树"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-101-简-对称二叉树\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/二叉树/lc-101-简-对称二叉树.md"}');export{i as comp,y as data};
