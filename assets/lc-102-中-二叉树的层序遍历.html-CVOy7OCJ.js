import{_ as s,o as n,c as l,e as a}from"./app-CnK5B_QS.js";const e={},p=a(`<h1 id="lc-102-中-二叉树的层序遍历" tabindex="-1"><a class="header-anchor" href="#lc-102-中-二叉树的层序遍历"><span>lc-102-中-二叉树的层序遍历</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/binary-tree-level-order-traversal/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">给你二叉树的根节点 root ，返回其节点值的 层序遍历 。 （即逐层地，从左到右访问所有节点）。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> getLogResultFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/logResult&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#D4D4D4;"> { </span><span style="color:#4FC1FF;">TreeNode</span><span style="color:#D4D4D4;">, </span><span style="color:#4FC1FF;">generateTree</span><span style="color:#D4D4D4;"> } = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/arr2tree&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> memoryTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/memoryTime&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">1. 一遍过，挺简单</span></span>
<span class="line"><span style="color:#6A9955;">执行用时分布,80,ms,击败,39.94%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">消耗内存分布,44.41,MB,击败,50.43%,使用 JavaScript 的用户</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> levelOrder</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (!</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> [];</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> results</span><span style="color:#D4D4D4;"> = [];</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> stacks</span><span style="color:#D4D4D4;"> = [[</span><span style="color:#9CDCFE;">root</span><span style="color:#D4D4D4;">]];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">stacks</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> !== </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> levelNodes</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">stacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> levelNodeValues</span><span style="color:#D4D4D4;"> = [];</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> nextLevelNodes</span><span style="color:#D4D4D4;"> = [];</span></span>
<span class="line"><span style="color:#C586C0;">    while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">levelNodes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> !== </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">      let</span><span style="color:#9CDCFE;"> curNode</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">levelNodes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">shift</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#9CDCFE;">      curNode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">nextLevelNodes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curNode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">left</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      curNode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">nextLevelNodes</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curNode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">right</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">      levelNodeValues</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">curNode</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">val</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#9CDCFE;">    nextLevelNodes</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">stacks</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">nextLevelNodes</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">    levelNodeValues</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">results</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">push</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">levelNodeValues</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#9CDCFE;"> results</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logResult</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLogResultFn</span><span style="color:#D4D4D4;">(</span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> () {</span></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#DCDCAA;"> levelOrder</span><span style="color:#D4D4D4;">(</span><span style="color:#DCDCAA;">generateTree</span><span style="color:#D4D4D4;">(...</span><span style="color:#569CD6;">arguments</span><span style="color:#D4D4D4;">));</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">9</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">20</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#569CD6;">null</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">15</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// [[3],[9,20],[15,7]]</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">( [</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]); </span><span style="color:#6A9955;">// [[1]]</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">( []); </span><span style="color:#6A9955;">// []</span></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[p];function c(t,r){return n(),l("div",null,o)}const i=s(e,[["render",c],["__file","lc-102-中-二叉树的层序遍历.html.vue"]]),y=JSON.parse('{"path":"/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-102-%E4%B8%AD-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html","title":"lc-102-中-二叉树的层序遍历","lang":"zh-CN","frontmatter":{"description":"lc-102-中-二叉树的层序遍历","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E4%BA%8C%E5%8F%89%E6%A0%91/lc-102-%E4%B8%AD-%E4%BA%8C%E5%8F%89%E6%A0%91%E7%9A%84%E5%B1%82%E5%BA%8F%E9%81%8D%E5%8E%86.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-102-中-二叉树的层序遍历"}],["meta",{"property":"og:description","content":"lc-102-中-二叉树的层序遍历"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-102-中-二叉树的层序遍历\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/二叉树/lc-102-中-二叉树的层序遍历.md"}');export{i as comp,y as data};
