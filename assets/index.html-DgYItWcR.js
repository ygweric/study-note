import{_ as s,o as n,c as a,e as l}from"./app-CnK5B_QS.js";const e={},o=l(`<h1 id="js导入的几种形式" tabindex="-1"><a class="header-anchor" href="#js导入的几种形式"><span>js导入的几种形式</span></a></h1><p>探讨下面内容：</p><ul><li>js导入</li><li>nodeJS导入</li><li>ES Module导入</li><li>vite、webpack导入</li></ul><h2 id="使用-script-标签直接引入" tabindex="-1"><a class="header-anchor" href="#使用-script-标签直接引入"><span>使用 <code>&lt;script&gt;</code> 标签直接引入</span></a></h2><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> src</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;https://cdn.jsdelivr.net/npm/library-name@version/dist/library.min.js&quot;</span><span style="color:#808080;">&gt;&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="使用模块打包工具" tabindex="-1"><a class="header-anchor" href="#使用模块打包工具"><span>使用模块打包工具</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// ES6 模块语法 </span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> library</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;library-name&#39;</span><span style="color:#D4D4D4;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="使用-node-js-的-require" tabindex="-1"><a class="header-anchor" href="#使用-node-js-的-require"><span>使用 Node.js 的 require()</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> library</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;library-name&#39;</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="es模块-esm-ecmascript-modules" tabindex="-1"><a class="header-anchor" href="#es模块-esm-ecmascript-modules"><span>ES模块（ESM, ECMAScript Modules)</span></a></h2><h3 id="import-xxx-from-xx-js" tabindex="-1"><a class="header-anchor" href="#import-xxx-from-xx-js"><span>import xxx from &#39;./xx.js&#39;;</span></a></h3><p>这种导入方式用于导入模块的默认导出（default export）。当一个模块只有一个主要的导出项时，通常会使用默认导出。默认导出可以是一个函数、类、对象或其他任何值。</p><p><strong>module.js</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 默认导出一个函数</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#C586C0;"> default</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> myFunction</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;This is a default export&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>main.js</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> myFunction</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./module.js&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#DCDCAA;">myFunction</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 输出: This is a default export</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-as-xx-from-xx-js" tabindex="-1"><a class="header-anchor" href="#import-as-xx-from-xx-js"><span>import * as xx from &#39;./xx.js&#39;;</span></a></h3><p>这种导入方式用于导入模块的所有命名导出（named exports）。它将所有命名导出作为一个对象导入，对象的属性名对应于模块中的导出名称。</p><p><strong>module.js</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 命名导出多个函数</span></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> function1</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;This is function1&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">export</span><span style="color:#569CD6;"> function</span><span style="color:#DCDCAA;"> function2</span><span style="color:#D4D4D4;">() {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;This is function2&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>main.js</strong></p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#C586C0;">import</span><span style="color:#569CD6;"> *</span><span style="color:#C586C0;"> as</span><span style="color:#9CDCFE;"> myModule</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./module.js&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">myModule</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">function1</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 输出: This is function1</span></span>
<span class="line"><span style="color:#9CDCFE;">myModule</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">function2</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">// 输出: This is function2</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="import-xxx-vs-import-as-xx" tabindex="-1"><a class="header-anchor" href="#import-xxx-vs-import-as-xx"><span><code>import xxx</code> vs <code>import * as xx</code></span></a></h3><ol><li><strong>默认导出 vs 命名导出</strong>：</li></ol><ul><li><code>import moduleName from &#39;./module.js&#39;;</code> 导入的是模块的默认导出。</li><li><code>import * as moduleName from &#39;./module.js&#39;;</code> 导入的是模块的所有命名导出。</li></ul><ol start="2"><li><strong>导入的结构</strong>：</li></ol><ul><li>默认导出可以直接赋值给一个变量名。</li><li>命名导出会被封装在一个对象中，对象的属性名与模块中的导出名称一致。</li></ul><ol start="3"><li><strong>使用场景</strong>：</li></ol><ul><li>当模块只有一个主要的导出项时，使用默认导出更为简洁。</li><li>当模块有多个导出项时，使用命名导出可以更好地组织和管理这些导出项。</li></ul><h3 id="动态导入-import" tabindex="-1"><a class="header-anchor" href="#动态导入-import"><span>动态导入 import()</span></a></h3><p>动态导入允许你在运行时按需加载模块，这对于提高性能和减少初始加载时间非常有用。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 动态导入模块</span></span>
<span class="line"><span style="color:#569CD6;">import</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./module.js&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // 使用模块中的功能</span></span>
<span class="line"><span style="color:#4EC9B0;">  module</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">functionName</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#D4D4D4;">}).</span><span style="color:#DCDCAA;">catch</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">  console</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">error</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;Failed to load module&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">error</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="使用-type-module-的-script-标签" tabindex="-1"><a class="header-anchor" href="#使用-type-module-的-script-标签"><span>使用 <code>type=&quot;module&quot;</code> 的<code> &lt;script&gt;</code> 标签</span></a></h3><p>在HTML中，可以通过设置<code>&lt;script&gt;</code>标签的type属性为module来引入ES模块。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#808080;">&lt;</span><span style="color:#569CD6;">script</span><span style="color:#9CDCFE;"> type</span><span style="color:#D4D4D4;">=</span><span style="color:#CE9178;">&quot;module&quot;</span><span style="color:#808080;">&gt;</span></span>
<span class="line"><span style="color:#C586C0;">  import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">functionName</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;./module.js&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#DCDCAA;">  functionName</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#808080;">&lt;/</span><span style="color:#569CD6;">script</span><span style="color:#808080;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="vite" tabindex="-1"><a class="header-anchor" href="#vite"><span>vite</span></a></h2><h3 id="import-meta-glob" tabindex="-1"><a class="header-anchor" href="#import-meta-glob"><span><code>import.meta.glob</code></span></a></h3><p><code>import.meta.glob</code> 通常用于以下场景：</p><ol><li><strong>按需加载组件</strong>：在Vue 3等框架中，可以用来动态加载组件。</li><li><strong>批量导入文件</strong>：例如，导入一个目录下的所有图片或JSON文件。</li><li><strong>懒加载路由</strong>：在Vue Router或React Router中，可以用来动态加载路由组件。</li></ol><h3 id="基本用法" tabindex="-1"><a class="header-anchor" href="#基本用法"><span>基本用法</span></a></h3><p>假设你有一个目录 <code>components</code>，里面包含多个组件文件，你可以使用 <code>import.meta.glob</code> 来动态导入这些组件。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// main.js</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;"> { </span><span style="color:#9CDCFE;">createApp</span><span style="color:#D4D4D4;"> } </span><span style="color:#C586C0;">from</span><span style="color:#CE9178;"> &#39;vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#C586C0;">import</span><span style="color:#9CDCFE;"> App</span><span style="color:#C586C0;"> from</span><span style="color:#CE9178;"> &#39;./App.vue&#39;</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> app</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">createApp</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">App</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 动态导入 components 目录下的所有 .vue 文件</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> components</span><span style="color:#D4D4D4;"> = </span><span style="color:#C586C0;">import</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">meta</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">glob</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;./components/*.vue&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">for</span><span style="color:#D4D4D4;"> (</span><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> path</span><span style="color:#569CD6;"> in</span><span style="color:#9CDCFE;"> components</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> componentName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">).</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">vue</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#9CDCFE;">  components</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">path</span><span style="color:#D4D4D4;">]().</span><span style="color:#DCDCAA;">then</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">module</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#9CDCFE;">    app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">componentName</span><span style="color:#D4D4D4;">, </span><span style="color:#4EC9B0;">module</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">  });</span></span>
<span class="line"><span style="color:#D4D4D4;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">mount</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;#app&#39;</span><span style="color:#D4D4D4;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="解释" tabindex="-1"><a class="header-anchor" href="#解释"><span>解释</span></a></h4><ul><li><strong><code>import.meta.glob</code></strong>：返回一个对象，键是匹配的文件路径，值是动态导入的Promise。</li><li><strong><code>context.keys()</code></strong>：在Webpack中，返回所有匹配的文件路径。</li><li><strong><code>context(key)</code></strong>：在Webpack中，根据文件路径动态导入模块。</li></ul><h2 id="webpack" tabindex="-1"><a class="header-anchor" href="#webpack"><span>webpack</span></a></h2><p><code>require.context</code> 是 Webpack 提供的一个强大的功能，用于创建一个动态的模块请求上下文。它允许你在运行时动态地导入一组模块，而不需要手动列出每个模块的路径。这对于处理大量的文件（如组件、图片、配置文件等）非常有用。</p><h3 id="示例" tabindex="-1"><a class="header-anchor" href="#示例"><span>示例</span></a></h3><p>假设你有一个 <code>components</code> 目录，里面包含多个 Vue 组件文件，你希望动态地导入这些组件。</p><h4 id="目录结构" tabindex="-1"><a class="header-anchor" href="#目录结构"><span>目录结构</span></a></h4><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>src/</span></span>
<span class="line"><span>├── components/</span></span>
<span class="line"><span>│   ├── Button.vue</span></span>
<span class="line"><span>│   ├── Input.vue</span></span>
<span class="line"><span>│   └── Modal.vue</span></span>
<span class="line"><span>└── main.js</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>main.js</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">// 创建一个 require.context 对象</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> requireComponent</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">require</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">context</span><span style="color:#D4D4D4;">(</span></span>
<span class="line"><span style="color:#CE9178;">  &#39;./components&#39;</span><span style="color:#D4D4D4;">, </span><span style="color:#6A9955;">// 目录路径</span></span>
<span class="line"><span style="color:#569CD6;">  false</span><span style="color:#D4D4D4;">,          </span><span style="color:#6A9955;">// 是否递归搜索子目录</span></span>
<span class="line"><span style="color:#D16969;">  /</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">vue</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#6A9955;">        // 匹配模式，只匹配 .vue 文件</span></span>
<span class="line"><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">// 遍历所有匹配的文件</span></span>
<span class="line"><span style="color:#9CDCFE;">requireComponent</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> componentName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fileName</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">\\w</span><span style="color:#D7BA7D;">+</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 去掉文件扩展名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> component</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">requireComponent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 注册组件到 Vue 应用</span></span>
<span class="line"><span style="color:#9CDCFE;">  app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">componentName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">component</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="解释-1" tabindex="-1"><a class="header-anchor" href="#解释-1"><span>解释</span></a></h3><ol><li><strong>创建 <code>require.context</code> 对象</strong>：</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span>const requireComponent = require.context(</span></span>
<span class="line"><span>  &#39;./components&#39;, // 目录路径</span></span>
<span class="line"><span>  false,          // 是否递归搜索子目录</span></span>
<span class="line"><span>  /\\.vue$/        // 匹配模式，只匹配 .vue 文件</span></span>
<span class="line"><span>);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="2"><li><strong>遍历匹配的文件</strong>：</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#9CDCFE;">requireComponent</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">keys</span><span style="color:#D4D4D4;">().</span><span style="color:#DCDCAA;">forEach</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;">) </span><span style="color:#569CD6;">=&gt;</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">  // 处理文件名，提取组件名</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> componentName</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">fileName</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">split</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&#39;/&#39;</span><span style="color:#D4D4D4;">)</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">pop</span><span style="color:#D4D4D4;">()</span></span>
<span class="line"><span style="color:#D4D4D4;">    .</span><span style="color:#DCDCAA;">replace</span><span style="color:#D4D4D4;">(</span><span style="color:#D16969;">/</span><span style="color:#D7BA7D;">\\.</span><span style="color:#D16969;">\\w</span><span style="color:#D7BA7D;">+</span><span style="color:#DCDCAA;">$</span><span style="color:#D16969;">/</span><span style="color:#D4D4D4;">, </span><span style="color:#CE9178;">&#39;&#39;</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 去掉文件扩展名</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 导入组件</span></span>
<span class="line"><span style="color:#569CD6;">  const</span><span style="color:#4FC1FF;"> component</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">requireComponent</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">fileName</span><span style="color:#D4D4D4;">).</span><span style="color:#9CDCFE;">default</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  // 注册组件到 Vue 应用</span></span>
<span class="line"><span style="color:#9CDCFE;">  app</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">component</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">componentName</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">component</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#D4D4D4;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,57),p=[o];function r(t,i){return n(),a("div",null,p)}const D=s(e,[["render",r],["__file","index.html.vue"]]),d=JSON.parse(`{"path":"/fe/module/import/","title":"js导入的几种形式","lang":"zh-CN","frontmatter":{"description":"js导入的几种形式 探讨下面内容： js导入 nodeJS导入 ES Module导入 vite、webpack导入 使用 <script> 标签直接引入 使用模块打包工具 使用 Node.js 的 require() ES模块（ESM, ECMAScript Modules) import xxx from './xx.js'; 这种导入方式用于导入...","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/fe/module/import/"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"js导入的几种形式"}],["meta",{"property":"og:description","content":"js导入的几种形式 探讨下面内容： js导入 nodeJS导入 ES Module导入 vite、webpack导入 使用 <script> 标签直接引入 使用模块打包工具 使用 Node.js 的 require() ES模块（ESM, ECMAScript Modules) import xxx from './xx.js'; 这种导入方式用于导入..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-05T03:54:59.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-05T03:54:59.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"js导入的几种形式\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-05T03:54:59.000Z\\",\\"author\\":[]}"]]},"headers":[{"level":2,"title":"使用 <script> 标签直接引入","slug":"使用-script-标签直接引入","link":"#使用-script-标签直接引入","children":[]},{"level":2,"title":"使用模块打包工具","slug":"使用模块打包工具","link":"#使用模块打包工具","children":[]},{"level":2,"title":"使用 Node.js 的 require()","slug":"使用-node-js-的-require","link":"#使用-node-js-的-require","children":[]},{"level":2,"title":"ES模块（ESM, ECMAScript Modules)","slug":"es模块-esm-ecmascript-modules","link":"#es模块-esm-ecmascript-modules","children":[{"level":3,"title":"import xxx from './xx.js';","slug":"import-xxx-from-xx-js","link":"#import-xxx-from-xx-js","children":[]},{"level":3,"title":"import * as xx from './xx.js';","slug":"import-as-xx-from-xx-js","link":"#import-as-xx-from-xx-js","children":[]},{"level":3,"title":"import xxx vs import * as xx","slug":"import-xxx-vs-import-as-xx","link":"#import-xxx-vs-import-as-xx","children":[]},{"level":3,"title":"动态导入 import()","slug":"动态导入-import","link":"#动态导入-import","children":[]},{"level":3,"title":"使用 type=\\"module\\" 的 <script> 标签","slug":"使用-type-module-的-script-标签","link":"#使用-type-module-的-script-标签","children":[]}]},{"level":2,"title":"vite","slug":"vite","link":"#vite","children":[{"level":3,"title":"import.meta.glob","slug":"import-meta-glob","link":"#import-meta-glob","children":[]},{"level":3,"title":"基本用法","slug":"基本用法","link":"#基本用法","children":[]}]},{"level":2,"title":"webpack","slug":"webpack","link":"#webpack","children":[{"level":3,"title":"示例","slug":"示例","link":"#示例","children":[]},{"level":3,"title":"解释","slug":"解释-1","link":"#解释-1","children":[]}]}],"git":{"updatedTime":1730778899000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":4}]},"autoDesc":true,"filePathRelative":"fe/module/import/index.md"}`);export{D as comp,d as data};
