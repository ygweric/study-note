import{_ as s,o as n,c as l,e as a}from"./app-CnK5B_QS.js";const p={},e=a(`<h1 id="lc-33-中-搜索旋转排序数组" tabindex="-1"><a class="header-anchor" href="#lc-33-中-搜索旋转排序数组"><span>lc-33-中-搜索旋转排序数组</span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="background-color:#1E1E1E;color:#D4D4D4;"><pre class="shiki dark-plus vp-code"><code><span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">https://leetcode.cn/problems/search-in-rotated-sorted-array/</span></span>
<span class="line"><span style="color:#6A9955;">整数数组 nums 按升序排列，数组中的值 互不相同 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">在传递给函数之前，nums 在预先未知的某个下标 k（0 &lt;= k &lt; nums.length）上进行了 旋转，</span></span>
<span class="line"><span style="color:#6A9955;">使数组变为 [nums[k], nums[k+1], ..., nums[n-1], nums[0], nums[1], ..., nums[k-1]]（下标 从 0 开始 计数）。</span></span>
<span class="line"><span style="color:#6A9955;">例如， [0,1,2,4,5,6,7] 在下标 3 处经旋转后可能变为 [4,5,6,7,0,1,2] 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">给你 旋转后 的数组 nums 和一个整数 target ，如果 nums 中存在这个目标值 target ，则返回它的下标，否则返回 -1 。</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">你必须设计一个时间复杂度为 O(log n) 的算法解决此问题。</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/*</span></span>
<span class="line"><span style="color:#6A9955;">  1. 之前看了几眼题解，开始写</span></span>
<span class="line"><span style="color:#6A9955;">    但是思路不对，其实需要左右都dfs的，</span></span>
<span class="line"><span style="color:#6A9955;">    这里写着写着就开始对一侧dfs了，</span></span>
<span class="line"><span style="color:#6A9955;">    复杂了，再来一次</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  2. 能运行，但时间复杂度搞，没有用到旋转的特性</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,68,ms,击败,30.43%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,40.58,MB,击败,99.74%,使用 JavaScript 的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  3. 基于2进行优化，设法利用旋转有序的特性</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,60,ms,击败,74.74%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,42.99,MB,击败,5.04%,使用 JavaScript 的用户</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">    内存消耗大，怎么也搞不出来</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  4. 又看了一遍题解，发现自己还是被绕进去了，再来一次</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,60,ms,击败,74.68%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,41.04,MB,击败,47.09%,使用 JavaScript 的用户</span></span>
<span class="line"><span style="color:#6A9955;">  总算速度和内存都还行了，但是最后相邻的判断很不好，回头在研究下</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">  5. 又看了题解，发现自己while对比时候，细节做的不好，导致代码复杂</span></span>
<span class="line"><span style="color:#6A9955;">    执行用时分布,56,ms,击败,88.08%,使用 JavaScript 的用户,</span></span>
<span class="line"><span style="color:#6A9955;">    消耗内存分布,40.95,MB,击败,79.79%,使用 JavaScript 的用户</span></span>
<span class="line"><span style="color:#6A9955;">  官方题解有点问题，做了修改</span></span>
<span class="line"><span style="color:#6A9955;">*/</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> getLogResultFn</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/logResult&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> memoryTime</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">require</span><span style="color:#D4D4D4;">(</span><span style="color:#CE9178;">&quot;../../utils/memoryTime&quot;</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#6A9955;">/**</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {number[]}</span><span style="color:#9CDCFE;"> nums</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@param</span><span style="color:#4EC9B0;"> {number}</span><span style="color:#9CDCFE;"> target</span></span>
<span class="line"><span style="color:#6A9955;"> * </span><span style="color:#569CD6;">@return</span><span style="color:#4EC9B0;"> {number}</span></span>
<span class="line"><span style="color:#6A9955;"> */</span></span>
<span class="line"><span style="color:#569CD6;">var</span><span style="color:#DCDCAA;"> search</span><span style="color:#D4D4D4;"> = </span><span style="color:#569CD6;">function</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">, </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> == </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"><span style="color:#C586C0;">  if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> === </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">    return</span><span style="color:#9CDCFE;"> nums</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] === </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> ? </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;"> : -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> leftIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#569CD6;">  let</span><span style="color:#9CDCFE;"> rightIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">.</span><span style="color:#9CDCFE;">length</span><span style="color:#D4D4D4;"> - </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  while</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">leftIndex</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">rightIndex</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#6A9955;">    // console.log(\`leftIndex: \${leftIndex}, rightIndex: \${rightIndex}\`);</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> centerIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">Math</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">floor</span><span style="color:#D4D4D4;">((</span><span style="color:#9CDCFE;">rightIndex</span><span style="color:#D4D4D4;"> + </span><span style="color:#9CDCFE;">leftIndex</span><span style="color:#D4D4D4;">) / </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"><span style="color:#569CD6;">    let</span><span style="color:#9CDCFE;"> centerNum</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">];</span></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">centerNum</span><span style="color:#D4D4D4;"> === </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;">) {</span></span>
<span class="line"><span style="color:#C586C0;">      return</span><span style="color:#9CDCFE;"> centerIndex</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">    if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">] &lt; </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#6A9955;">      // 左侧有序</span></span>
<span class="line"><span style="color:#6A9955;">      // 这里两个比较都是用 &lt;= 猜对，官方题解不对</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">leftIndex</span><span style="color:#D4D4D4;">] &lt;= </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">]) { </span></span>
<span class="line"><span style="color:#6A9955;">        // 在center左侧</span></span>
<span class="line"><span style="color:#9CDCFE;">        rightIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // 在center右侧</span></span>
<span class="line"><span style="color:#9CDCFE;">        leftIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">      // 右侧有序</span></span>
<span class="line"><span style="color:#C586C0;">      if</span><span style="color:#D4D4D4;"> (</span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">] &lt;= </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> &amp;&amp; </span><span style="color:#9CDCFE;">target</span><span style="color:#D4D4D4;"> &lt;= </span><span style="color:#9CDCFE;">nums</span><span style="color:#D4D4D4;">[</span><span style="color:#9CDCFE;">rightIndex</span><span style="color:#D4D4D4;">]) {</span></span>
<span class="line"><span style="color:#6A9955;">        // 在center右侧</span></span>
<span class="line"><span style="color:#9CDCFE;">        leftIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">+</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      } </span><span style="color:#C586C0;">else</span><span style="color:#D4D4D4;"> {</span></span>
<span class="line"><span style="color:#6A9955;">        // 在center左侧</span></span>
<span class="line"><span style="color:#9CDCFE;">        rightIndex</span><span style="color:#D4D4D4;"> = </span><span style="color:#9CDCFE;">centerIndex</span><span style="color:#D4D4D4;">-</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">      }</span></span>
<span class="line"><span style="color:#D4D4D4;">    }</span></span>
<span class="line"><span style="color:#D4D4D4;">  }</span></span>
<span class="line"></span>
<span class="line"><span style="color:#C586C0;">  return</span><span style="color:#D4D4D4;"> -</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">;</span></span>
<span class="line"><span style="color:#D4D4D4;">};</span></span>
<span class="line"></span>
<span class="line"><span style="color:#569CD6;">const</span><span style="color:#4FC1FF;"> logResult</span><span style="color:#D4D4D4;"> = </span><span style="color:#DCDCAA;">getLogResultFn</span><span style="color:#D4D4D4;">(</span><span style="color:#9CDCFE;">search</span><span style="color:#D4D4D4;">);</span></span>
<span class="line"></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">load</span><span style="color:#D4D4D4;">();</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 4</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">7</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// -1</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">0</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// -1</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">4</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">5</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">6</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">, </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">2</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 5</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 0</span></span>
<span class="line"><span style="color:#DCDCAA;">logResult</span><span style="color:#D4D4D4;">([</span><span style="color:#B5CEA8;">3</span><span style="color:#D4D4D4;">,</span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">], </span><span style="color:#B5CEA8;">1</span><span style="color:#D4D4D4;">); </span><span style="color:#6A9955;">// 1</span></span>
<span class="line"><span style="color:#9CDCFE;">memoryTime</span><span style="color:#D4D4D4;">.</span><span style="color:#DCDCAA;">log</span><span style="color:#D4D4D4;">(); </span><span style="color:#6A9955;">//</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,2),o=[e];function c(r,t){return n(),l("div",null,o)}const i=s(p,[["render",c],["__file","lc-33-中-搜索旋转排序数组.html.vue"]]),y=JSON.parse('{"path":"/interview/algorithm/%E5%8E%9F%E5%9C%B0%E5%93%88%E5%B8%8C/lc-33-%E4%B8%AD-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html","title":"lc-33-中-搜索旋转排序数组","lang":"zh-CN","frontmatter":{"description":"lc-33-中-搜索旋转排序数组","head":[["meta",{"property":"og:url","content":"https://cesium.guowei.fun/interview/algorithm/%E5%8E%9F%E5%9C%B0%E5%93%88%E5%B8%8C/lc-33-%E4%B8%AD-%E6%90%9C%E7%B4%A2%E6%97%8B%E8%BD%AC%E6%8E%92%E5%BA%8F%E6%95%B0%E7%BB%84.html"}],["meta",{"property":"og:site_name","content":"学习笔记"}],["meta",{"property":"og:title","content":"lc-33-中-搜索旋转排序数组"}],["meta",{"property":"og:description","content":"lc-33-中-搜索旋转排序数组"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2024-11-20T08:12:25.000Z"}],["meta",{"property":"article:modified_time","content":"2024-11-20T08:12:25.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"lc-33-中-搜索旋转排序数组\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2024-11-20T08:12:25.000Z\\",\\"author\\":[]}"]]},"headers":[],"git":{"updatedTime":1732090345000,"contributors":[{"name":"国wei","email":"ygweric@gmail.com","commits":1}]},"autoDesc":true,"filePathRelative":"interview/algorithm/原地哈希/lc-33-中-搜索旋转排序数组.md"}');export{i as comp,y as data};
